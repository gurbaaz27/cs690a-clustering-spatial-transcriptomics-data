# -*- coding: utf-8 -*-
"""cs690_task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e9r5cx1kSnoblBqvNdjkMI9OYOl8q7mO

# imports
"""

# !pip install scanpy

import scanpy as sc
import numpy as np
import pandas as pd

# from google.colab import drive
# drive.mount('/content/drive')

sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')

"""# integration of train and test data, for similar dimension reduction in both"""

# !pip install --quiet scvi-colab
# !pip install --quiet git+https://github.com/theislab/scib.git
# from scvi_colab import install
# install()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

import scanpy as sc
import scvi
import scib

sc.set_figure_params(figsize=(4, 4))

# %config InlineBackend.print_figure_kwargs={'facecolor' : "w"}
# %config InlineBackend.figure_format='retina'

# !pip install matplotlib==3.1.1

adata_train = sc.read_visium('CS690-Assignment1-Task1')
adata_train.var_names_make_unique()

adata_test = sc.read_visium('CS690-Assignment1-Task2')
adata_test.var_names_make_unique()

adata2 = adata_train.concatenate(adata_test)

# adata2

# from skmisc.loess import loess
adata2.layers["counts"] = adata2.X.copy()
sc.pp.normalize_total(adata2, target_sum=1e4)
sc.pp.log1p(adata2)
adata2.raw = adata2  # keep full dimension safe
sc.pp.highly_variable_genes(
    adata2,
    flavor="seurat_v3",
    n_top_genes=2000,
    layer="counts",
    batch_key="batch",
    subset=True
)
scvi.model.SCVI.setup_anndata(adata2, layer="counts", batch_key="batch")
vae = scvi.model.SCVI(adata2, n_layers=2, n_latent=30)
vae.train()

adata2.obsm["X_scVI"] = vae.get_latent_representation()

sc.pp.neighbors(adata2, use_rep="X_scVI")
sc.tl.leiden(adata2)

from scvi.model.utils import mde
import pymde
adata2.obsm["X_mde"] = mde(adata2.obsm["X_scVI"])

sc.pl.embedding(
    adata2,
    basis="X_mde",
    color=["batch", "leiden"],
    frameon=False,
    ncols=1,
)

"""# model"""

adata = adata2

# getting the latent representations and storing in adata.obs
Z_hat = vae.get_latent_representation()
for i, z in enumerate(Z_hat.T):
    adata.obs[f'Z_{i}'] = z

adata_test_obs = adata.obs[3639:]
adata_obs = adata.obs[:3639]

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

Y = pd.read_csv('CS690-Assignment1-Task1/Train_metadata.csv')

# separating out the input (X) and output (y) from the adata
# X = adata.obs[{'Z_0','Z_1','Z_2','Z_3','Z_4'}] 
X = adata_obs[{'Z_0','Z_1','Z_2','Z_3','Z_4','Z_5','Z_6','Z_7','Z_8','Z_9', 'Z_10','Z_11','Z_12','Z_13','Z_14','Z_15','Z_16','Z_17','Z_18','Z_19', 'Z_20','Z_21','Z_22','Z_23','Z_24','Z_25','Z_26','Z_27','Z_28','Z_29'}] 
# X = adata2.obsm[]
# X = adata.obs[{'Z_0','Z_1','Z_2','Z_3','Z_4','Z_5','Z_6','Z_7','Z_8','Z_9','Z_10','Z_11','Z_12','Z_13','Z_14','Z_15','Z_16','Z_17','Z_18','Z_19' }] 


x_temp1 = adata_obs['array_row']
x_temp1 = np.array(x_temp1)
x_temp1 = x_temp1/max(x_temp1)

x_temp2 = adata_obs['array_col']
x_temp2 = np.array(x_temp2)
x_temp2 = x_temp2/max(x_temp2)

X['row'] = x_temp1
X['col'] = x_temp2
y = Y['Cluster']
y = np.array(y)

y = y.astype(str)
unique_cluster_types = np.unique(y) #unique cell types

cell_type_number = {} #dictionary of cell types against their index
for i in range(len(unique_cluster_types)):
  cell_type_number[unique_cluster_types[i]] = i

y_numbered = [0]*len(y) #numerical output
for i in range(len(y)):
  y_numbered[i] = cell_type_number[y[i]]
y_numbered = np.array(y_numbered)
X_copy = X.copy()
y_num_copy = y_numbered.copy()
# oversampling
X['output'] = y_numbered

X_0 = X.loc[X['output'] == 0]
X_1 = X.loc[X['output'] == 1]
X_2 = X.loc[X['output'] == 2]
X_3 = X.loc[X['output'] == 3]
X_4 = X.loc[X['output'] == 4]
X_5 = X.loc[X['output'] == 5]
X_6 = X.loc[X['output'] == 6]
X_7 = X.loc[X['output'] == 7]

max_len = max(len(X_0), len(X_1), len(X_2), len(X_3), len(X_4), len(X_5), len(X_6), len(X_7))
X_0 = X_0.sample(5*max_len, replace = True)
X_1 = X_1.sample(5*max_len, replace = True)
X_2 = X_2.sample(5*max_len, replace = True)
X_3 = X_3.sample(5*max_len, replace = True)
X_4 = X_4.sample(5*max_len, replace = True)
X_5 = X_5.sample(5*max_len, replace = True)
X_6 = X_6.sample(5*max_len, replace = True)
X_7 = X_7.sample(5*max_len, replace = True)

X = pd.concat([X_0,X_1,X_2,X_3,X_4,X_5,X_6,X_7], axis = 0)

y_numbered = X['output']
# y_numbered = np.array(y_numbered)
X = X.drop('output', axis = 'columns')
# X = np.array(X)

# train test split
from sklearn.model_selection import train_test_split
y_train, y_test, X_train, X_test = train_test_split(y_numbered, X, test_size = 0.2, random_state = 2, stratify = y_numbered)

# actual model
model = keras.Sequential([
    keras.layers.Dense(32, input_shape=(32,), activation='relu'),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(25, activation='relu'),
    keras.layers.Dense(25, activation='relu'),
    keras.layers.Dense(18, activation='relu'),
    keras.layers.Dense(18, activation='relu'),
    keras.layers.Dense(8, activation='softmax')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['sparse_categorical_accuracy'])

# model fitting
model.fit(X_train, y_train, epochs=10)

model.evaluate(X_test,y_test)

X_np = np.array(X_copy)
# prediction array

prediction = []
for i in range(len(X_np)):
  prediction.append(np.argmax(model.predict(X_np[[i]])))

adata = adata2

prediction_str = []
for i in range(len(prediction)):
  prediction_str.append(str(prediction[i])) 
adata_train.obs['clusters_pred'] = prediction_str

sc.pl.spatial(adata_train, img_key = "hires", color="clusters_pred", size=1.5)

from sklearn.metrics import adjusted_rand_score
ari = adjusted_rand_score(y_num_copy, prediction)
print(ari)

"""# applying model on test data and smoothing


"""

Xt = adata_test_obs[{'Z_0','Z_1','Z_2','Z_3','Z_4','Z_5','Z_6','Z_7','Z_8','Z_9','Z_10','Z_11','Z_12','Z_13','Z_14','Z_15','Z_16','Z_17','Z_18','Z_19', 'Z_20','Z_21','Z_22','Z_23','Z_24','Z_25','Z_26','Z_27','Z_28','Z_29'}]

xt_temp1 = adata_test_obs['array_row']
xt_temp1 = np.array(xt_temp1)
xt_temp1 = xt_temp1/max(xt_temp1)

xt_temp2 = adata_test_obs['array_col']
xt_temp2 = np.array(xt_temp2)
xt_temp2 = xt_temp2/max(xt_temp2)

Xt['row'] = xt_temp1
Xt['col'] = xt_temp2

Xt_np = np.array(Xt)
# prediction array
predictiont_array = []
for i in range(len(Xt_np)):
  predictiont_array.append(model.predict(Xt_np[[i]]))
predictiont = []
for i in range(len(Xt_np)):
  predictiont.append(np.argmax(predictiont_array[i]))

predictiont_str = []
for i in range(len(predictiont)):
  predictiont_str.append(str(predictiont[i])) 
adata_test.obs['clusters_pred'] = predictiont_str

sc.pl.spatial(adata_test, img_key = "hires", color="clusters_pred", size=1.5)

"""smoothening"""

num1 = max(adata_test.obs['array_col'])+1
num2 = max(adata_test.obs['array_row'])+1
coor_to_ind = [[-1]*(num1) for i in range(num2)]
for i in range(len(adata_test.obs)):
  coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]] = i

clusters_copy = adata_test.obs['clusters_pred'].copy()
for i in range(len(adata_test.obs)):
  # print(i, adata.obs['array_col'][i], adata.obs['array_row'][i])
  if adata_test.obs['array_col'][i] == 0 or adata_test.obs['array_col'][i] == 1 or adata_test.obs['array_col'][i] == num1-1 or adata_test.obs['array_col'][i] == num1-2 or adata_test.obs['array_row'][i] == 0 or adata_test.obs['array_row'][i] == 1 or adata_test.obs['array_row'][i] == num2-1 or adata_test.obs['array_row'][i] == num2-2:
    continue
  ct = adata_test.obs['clusters_pred'][i]
  lt = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]-2]]
  tl = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]-1]]
  tr = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]+1]]
  rt = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]+2]]
  br = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]+1]]
  bl = adata_test.obs['clusters_pred'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]-1]]
  if ct != lt and ct != tl and ct != tr and ct != rt and ct != br and ct != bl:
     clusters_copy[i] = lt
adata_test.obs['clusters_pred_smooth'] = clusters_copy
sc.pl.spatial(adata_test, img_key = "hires", color="clusters_pred_smooth", size=1.5)

for j in range(3):
  clusters_copy = adata_test.obs['clusters_pred_smooth'].copy()
  for i in range(len(adata_test.obs)):
    # print(i, adata.obs['array_col'][i], adata.obs['array_row'][i])
    if adata_test.obs['array_col'][i] == 0 or adata_test.obs['array_col'][i] == 1 or adata_test.obs['array_col'][i] == num1-1 or adata_test.obs['array_col'][i] == num1-2 or adata_test.obs['array_row'][i] == 0 or adata_test.obs['array_row'][i] == 1 or adata_test.obs['array_row'][i] == num2-1 or adata_test.obs['array_row'][i] == num2-2:
      continue
    ct = adata_test.obs['clusters_pred_smooth'][i]
    lt = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]-2]]
    tl = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]-1]]
    tr = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]+1]]
    rt = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]+2]]
    br = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]+1]]
    bl = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]-1]]
    if ct != lt and ct != tl and ct != tr and ct != rt and ct != br:
      clusters_copy[i] = lt
    if ct != lt and ct != tl and ct != tr and ct != rt and ct != bl:
      clusters_copy[i] = lt
    if ct != lt and ct != tl and ct != tr and ct != br and ct != bl:
      clusters_copy[i] = lt
    if ct != lt and ct != tl and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = lt
    if ct != lt and ct != tr and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = lt
    if ct != tl and ct != tr and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = tl
  adata_test.obs['clusters_pred_smooth'] = clusters_copy
  sc.pl.spatial(adata_test, img_key = "hires", color="clusters_pred_smooth", size=1.5)

clusters_copy = adata_test.obs['clusters_pred_smooth'].copy()
for i in range(len(adata_test.obs)):
  # print(i, adata.obs['array_col'][i], adata.obs['array_row'][i])
  col = adata_test.obs['array_col'][i]
  row = adata_test.obs['array_row'][i]
  if col <= 10 or col >= num1-10 or row <= 10 or row >= num2-10:
    continue
  ct = predictiont_array[i]
  lt = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]-2]]
  tl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]-1]]
  tr = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]+1]]
  rt = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]+2]]
  br = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]+1]]
  bl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]-1]]
  ltlt = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]-4]]
  lttl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]-3]]
  ltbl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]-3]]
  rtrt = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]+4]]
  rttr = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]+3]]
  rtbr = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]+3]]
  ttl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-2][adata_test.obs['array_col'][i]-2]]
  top = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-2][adata_test.obs['array_col'][i]]]
  ttr = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]-2][adata_test.obs['array_col'][i]+1]]
  bbl = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+2][adata_test.obs['array_col'][i]-2]]
  bot = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+2][adata_test.obs['array_col'][i]]]
  bbr = predictiont_array[coor_to_ind[adata_test.obs['array_row'][i]+2][adata_test.obs['array_col'][i]+1]]
  
  arr = np.array(ct+lt+tl+tr+rt+br+bl+ltlt+lttl+ltbl+rtrt+rttr+rtbr+ttl+top+ttr+bbl+bot+bbr)
  # if np.argmax(arr) == 1 or np.argmax(arr) == 3 or np.argmax(arr) == 7 or np.argmax(arr) ==: clusters_copy[i] = str(np.argmax(arr))
  # if ct != lt and ct != tl and ct != tr and ct != rt and ct != br and ct != bl:
  clusters_copy[i] = str(np.argmax(arr))
adata_test.obs['clusters_pred_smooth'] = clusters_copy
sc.pl.spatial(adata_test, img_key = "hires", color="clusters_pred_smooth", size=1.5)

for j in range(3):
  clusters_copy = adata_test.obs['clusters_pred_smooth'].copy()
  for i in range(len(adata_test.obs)):
    # print(i, adata.obs['array_col'][i], adata.obs['array_row'][i])
    if adata_test.obs['array_col'][i] == 0 or adata_test.obs['array_col'][i] == 1 or adata_test.obs['array_col'][i] == num1-1 or adata_test.obs['array_col'][i] == num1-2 or adata_test.obs['array_row'][i] == 0 or adata_test.obs['array_row'][i] == 1 or adata_test.obs['array_row'][i] == num2-1 or adata_test.obs['array_row'][i] == num2-2:
      continue
    ct = adata_test.obs['clusters_pred_smooth'][i]
    lt = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]-2]]
    tl = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]-1]]
    tr = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]-1][adata_test.obs['array_col'][i]+1]]
    rt = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]][adata_test.obs['array_col'][i]+2]]
    br = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]+1]]
    bl = adata_test.obs['clusters_pred_smooth'][coor_to_ind[adata_test.obs['array_row'][i]+1][adata_test.obs['array_col'][i]-1]]
    if ct != lt and ct != tl and ct != tr and ct != rt and ct != br:
      clusters_copy[i] = rt
    if ct != lt and ct != tl and ct != tr and ct != rt and ct != bl:
      clusters_copy[i] = rt
    if ct != lt and ct != tl and ct != tr and ct != br and ct != bl:
      clusters_copy[i] = tr
    if ct != lt and ct != tl and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = rt
    if ct != lt and ct != tr and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = rt
    if ct != tl and ct != tr and ct != rt and ct != br and ct != bl:
      clusters_copy[i] = rt
  adata_test.obs['clusters_pred_smooth'] = clusters_copy
  sc.pl.spatial(adata_test, img_key = "hires", color="clusters_pred_smooth", size=1.5)

bars_to_avoid = pd.read_csv('CS690-Assignment1-Task2/Test_barcodes_to_avoid.csv')
adata_test_copy = adata_test.obs.copy()
for i in range(len(bars_to_avoid)):
  adata_test_copy.drop(index = bars_to_avoid['0'][i], inplace = True)
id = adata_test_copy.index
expect = np.array(adata_test_copy['clusters_pred_smooth'])
output = pd.DataFrame()
output['Id'] = id
output['Expected'] = expect
output.to_csv('output.csv')

print(output)
